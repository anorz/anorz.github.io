<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[mysql 四种事务隔离级别]]></title>
      <url>/2018/03/18/mysql-transaction-isolation/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitmq queue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息队列 RabbitMQ -- 交换器类型与消息持久化]]></title>
      <url>/2018/01/04/mq-rabbitmq-exchange-and-durable/</url>
      <content type="html"><![CDATA[<h6 id="四种交换器类型"><a href="#四种交换器类型" class="headerlink" title="四种交换器类型"></a>四种交换器类型</h6><p>上章中说到，AMQP消息路由必须有三个部分： 交换器、队列、绑定。<br><b>生产者把消息发布到交换器上；消息最终到达队列，并被消费者解释；绑定决定了消息如何从路由器 路由到特定队列。</b><br>rabbitmq 服务器会根据路由键将消息从交换器路由到列队，但是它是如何处理投递到多个队列的情况呢？<br>协议中定义的不同类型交换器发挥了作用。<br>一共四种类型： direct、fanout、topic、headers.<br><br></p>
<h6 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h6><p><img src="/img/direct_exchange.png"></p>
<pre><code>DirectExchange是RabbitMQ Broker的默认Exchange.
果然路由键匹配的话，消息就被投递到对应的队列。
当声明一个队列时，它会自动绑定到默认交换器，并以 队列名 作为路由键。
</code></pre><h6 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h6><p><img src="/img/fanout_exchange.png"></p>
<pre><code>FanoutExchange 
当你发送一条消息到fanout交换器时，它会把消息投递给所有附加在此交换器上的所有队列。
</code></pre><h6 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h6><p><img src="/img/topic_exchange.png"></p>
<pre><code>TopicExchange 
它使得来自不同源头的消息能够到达同一个队列。

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>
</code></pre><p>生产者创建消息(消息包含两部分: 有效载荷[payload] 和 标签[label])，然后发布(Publish) 到代理服务器(RabbitMQ)</p>
<p>消费者连接到代理服务器，并订阅到队列上。当消费者接受到消息时，它只得到了消息的一部分：有效载荷。在消息路由过程中，消息的标签并没有随有效载荷一同传递。<br><b>如果需要明确知道谁生产的AMQP消息的话，就要看生产者是否把消息方信息放入有效载荷中。</b></p>
<h6 id="AMQP栈"><a href="#AMQP栈" class="headerlink" title="AMQP栈"></a>AMQP栈</h6><p><img src="https://www.rabbitmq.com/img/tutorials/intro/hello-world-example-routing.png"><br>AMQP消息路由必须有三个部分： 交换器、队列、绑定。<br><b>生产者把消息发布到交换器上；消息最终到达队列，并被消费者解释；绑定决定了消息如何从路由器 路由到特定队列。</b></p>
<h6 id="消费者和生产者到底谁去创建队列？"><a href="#消费者和生产者到底谁去创建队列？" class="headerlink" title="消费者和生产者到底谁去创建队列？"></a>消费者和生产者到底谁去创建队列？</h6><p><b>如果你不能承担得起消息进入“黑洞”而丢失的话，你的生产者和消费者就都应该尝试去创建队列。</b></p>
<h6 id="生产者创建消息"><a href="#生产者创建消息" class="headerlink" title="生产者创建消息"></a>生产者创建消息</h6><pre><code><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="comment">// step 1. 创建 connection</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@127.0.0.1:5672/"</span>)</span><br><span class="line"><span class="comment">// step 2. 获取 (信道)channel</span></span><br><span class="line">channel, err := conn.Channel()</span><br><span class="line"><span class="comment">// step 3. 在信道上声明交换器 exchange</span></span><br><span class="line">channel.ExchangeDeclare(</span><br><span class="line">    <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">    amqp.ExchangeDirect, <span class="comment">// exchange type</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// durable</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// autoDelete</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// internal</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// noWait</span></span><br><span class="line">    <span class="literal">nil</span>,                 <span class="comment">// args amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 4. 声明队列</span></span><br><span class="line">queue, err := ch.QueueDeclare(</span><br><span class="line">        <span class="string">"queue_name"</span>,    <span class="comment">// queue name</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// durable</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// delete when unused</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// exclusive</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// no-wait</span></span><br><span class="line">        <span class="literal">nil</span>,             <span class="comment">// arguments amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 5. 将队列绑定根据路由键绑定到交换器上</span></span><br><span class="line">channel.QueueBind(</span><br><span class="line">    queue.Name,          <span class="comment">// queue name</span></span><br><span class="line">    <span class="string">"route_key"</span>,         <span class="comment">// route key</span></span><br><span class="line">    <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// no-wait</span></span><br><span class="line">    <span class="literal">nil</span>,                 <span class="comment">// arguments amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 6. 将消息发送到交换器上，交换器会根据路由键将消息发送到对应的队列queue</span></span><br><span class="line">channel.Publish(</span><br><span class="line">        <span class="string">"exchange_name"</span>, <span class="comment">// exchange</span></span><br><span class="line">        <span class="string">"route_key"</span>,     <span class="comment">// routing key</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// mandatory</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// immediate</span></span><br><span class="line">        amqp.Publishing&#123; <span class="comment">// message</span></span><br><span class="line">            ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">            Body:        []<span class="keyword">byte</span>(<span class="string">"hello world"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</code></pre><h6 id="消费者订阅消息"><a href="#消费者订阅消息" class="headerlink" title="消费者订阅消息"></a>消费者订阅消息</h6><pre><code><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> <span class="string">"github.com/streadway/amqp"</span></span><br><span class="line">   <span class="comment">// step 1. 创建 connection</span></span><br><span class="line">   conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@127.0.0.1:5672/"</span>)</span><br><span class="line">   <span class="comment">// step 2. 获取 (信道)channel</span></span><br><span class="line">   channel, err := conn.Channel()</span><br><span class="line">   <span class="comment">// step 3. 在信道上声明交换器 exchange</span></span><br><span class="line">   channel.ExchangeDeclare(</span><br><span class="line">       <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">       amqp.ExchangeDirect, <span class="comment">// exchange type</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// durable</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// autoDelete</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// internal</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// noWait</span></span><br><span class="line">       <span class="literal">nil</span>,                 <span class="comment">// args amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   <span class="comment">// step 4. 声明队列</span></span><br><span class="line">   queue, err := ch.QueueDeclare(</span><br><span class="line">           <span class="string">"queue_name"</span>,    <span class="comment">// queue name</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// durable</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// delete when unused</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// exclusive</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// no-wait</span></span><br><span class="line">           <span class="literal">nil</span>,             <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   <span class="comment">// step 5. 将队列绑定根据路由键绑定到交换器上</span></span><br><span class="line">   channel.QueueBind(</span><br><span class="line">       queue.Name,          <span class="comment">// queue name</span></span><br><span class="line">       <span class="string">"route_key"</span>,         <span class="comment">// route key</span></span><br><span class="line">       <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// no-wait</span></span><br><span class="line">       <span class="literal">nil</span>,                 <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="comment">// step 6. 在信道上订阅队列</span></span><br><span class="line">   messages, err := channel.Consume(</span><br><span class="line">       queue.Name,           <span class="comment">// queue</span></span><br><span class="line">       <span class="string">""</span>,                   <span class="comment">// consumer</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// autoAck</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// exclusive</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// noLocal ：The noLocal flag is not supported by RabbitMQ.</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// no-wait</span></span><br><span class="line">       <span class="literal">nil</span>,                  <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">  <span class="comment">// 开启一个 goruntine 获取消息内容 </span></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> message := <span class="keyword">range</span> messages &#123;</span><br><span class="line">               log.Printf(<span class="string">"Received a message: %s"</span>, message.Body)</span><br><span class="line">               message.Ack(<span class="literal">true</span>)</span><br><span class="line">       &#125;</span><br><span class="line">&#125;()</span><br><span class="line">   fmt.Println(<span class="string">"Please ctrl+c to stop"</span>)</span><br><span class="line">   &lt;-forever</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> mq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitmq queue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网穿透工具 - frp]]></title>
      <url>/2018/01/03/liunx-frp/</url>
      <content type="html"><![CDATA[<p><a href="https://travis-ci.org/fatedier/frp" target="_blank" rel="noopener"><img src="https://travis-ci.org/fatedier/frp.svg?branch=master" alt="Build Status"></a></p>
<p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- vim-markdown-toc GFM -->
<ul>
<li><a href="#frp-的作用">frp 的作用</a></li>
<li><a href="#开发状态">开发状态</a></li>
<li><a href="#架构">架构</a></li>
<li><a href="#使用示例">使用示例</a><ul>
<li><a href="#通过-ssh-访问公司内网机器">通过 ssh 访问公司内网机器</a></li>
<li><a href="#通过自定义域名访问部署于内网的-web-服务">通过自定义域名访问部署于内网的 web 服务</a></li>
<li><a href="#转发-dns-查询请求">转发 DNS 查询请求</a></li>
<li><a href="#转发-unix域套接字">转发 Unix域套接字</a></li>
<li><a href="#对外提供简单的文件访问服务">对外提供简单的文件访问服务</a></li>
<li><a href="#安全地暴露内网服务">安全地暴露内网服务</a></li>
<li><a href="#点对点内网穿透">点对点内网穿透</a></li>
<li><a href="#通过-frpc-所在机器访问外网">通过 frpc 所在机器访问外网</a></li>
</ul>
</li>
<li><a href="#功能说明">功能说明</a><ul>
<li><a href="#配置文件">配置文件</a></li>
<li><a href="#dashboard">Dashboard</a></li>
<li><a href="#身份验证">身份验证</a></li>
<li><a href="#加密与压缩">加密与压缩</a></li>
<li><a href="#客户端热加载配置文件">客户端热加载配置文件</a></li>
<li><a href="#客户端查看代理状态">客户端查看代理状态</a></li>
<li><a href="#特权模式">特权模式</a><ul>
<li><a href="#端口白名单">端口白名单</a></li>
</ul>
</li>
<li><a href="#tcp-多路复用">TCP 多路复用</a></li>
<li><a href="#底层通信可选-kcp-协议">底层通信可选 kcp 协议</a></li>
<li><a href="#连接池">连接池</a></li>
<li><a href="#修改-host-header">修改 Host Header</a></li>
<li><a href="#获取用户真实-ip">获取用户真实 IP</a></li>
<li><a href="#通过密码保护你的-web-服务">通过密码保护你的 web 服务</a></li>
<li><a href="#自定义二级域名">自定义二级域名</a></li>
<li><a href="#url-路由">URL 路由</a></li>
<li><a href="#通过代理连接-frps">通过代理连接 frps</a></li>
<li><a href="#范围端口映射">范围端口映射</a></li>
<li><a href="#插件">插件</a></li>
</ul>
</li>
</ul>
<!-- vim-markdown-toc -->
<h2 id="frp-的作用"><a href="#frp-的作用" class="headerlink" title="frp 的作用"></a>frp 的作用</h2><ul>
<li>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</li>
<li>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。</li>
<li>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</li>
</ul>
<h2 id="开发状态"><a href="#开发状态" class="headerlink" title="开发状态"></a>开发状态</h2><p>frp 仍然处于前期开发阶段，未经充分测试与验证，不推荐用于生产环境。</p>
<p>master 分支用于发布稳定版本，dev 分支用于开发，您可以尝试下载最新的 release 版本进行测试。</p>
<p><strong>目前的交互协议可能随时改变，不保证向后兼容，升级新版本时需要注意公告说明同时升级服务端和客户端。</strong></p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>根据对应的操作系统及架构，从 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">Release</a> 页面下载最新版本的程序。</p>
<p>将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有公网 IP 的机器上。</p>
<p>将 <strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p>
<h3 id="通过-ssh-访问公司内网机器"><a href="#通过-ssh-访问公司内网机器" class="headerlink" title="通过 ssh 访问公司内网机器"></a>通过 ssh 访问公司内网机器</h3><ol>
<li><p>修改 frps.ini 文件，这里使用了最简化的配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frps：</p>
<p><code>./frps -c ./frps.ini</code></p>
</li>
<li><p>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frpc：</p>
<p><code>./frpc -c ./frpc.ini</code></p>
</li>
<li><p>通过 ssh 访问内网机器，假设用户名为 test：</p>
<p><code>ssh -oPort=6000 test@x.x.x.x</code></p>
</li>
</ol>
<h3 id="通过自定义域名访问部署于内网的-web-服务"><a href="#通过自定义域名访问部署于内网的-web-服务" class="headerlink" title="通过自定义域名访问部署于内网的 web 服务"></a>通过自定义域名访问部署于内网的 web 服务</h3><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p>
<ol>
<li><p>修改 frps.ini 文件，设置 http 访问端口为 8080：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frps；</p>
<p><code>./frps -c ./frps.ini</code></p>
</li>
<li><p>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 <code>www.yourdomain.com</code>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = www.yourdomain.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frpc：</p>
<p><code>./frpc -c ./frpc.ini</code></p>
</li>
<li><p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p>
</li>
<li><p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 web 服务。</p>
</li>
</ol>
<h3 id="转发-DNS-查询请求"><a href="#转发-DNS-查询请求" class="headerlink" title="转发 DNS 查询请求"></a>转发 DNS 查询请求</h3><p>DNS 查询请求通常使用 UDP 协议，frp 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。</p>
<ol>
<li><p>修改 frps.ini 文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frps：</p>
<p><code>./frps -c ./frps.ini</code></p>
</li>
<li><p>修改 frpc.ini 文件，设置 frps 所在服务器的 IP 为 x.x.x.x，转发到 Google 的 DNS 查询服务器 <code>8.8.8.8</code> 的 udp 53 端口：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dns]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">53</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frpc：</p>
<p><code>./frpc -c ./frpc.ini</code></p>
</li>
<li><p>通过 dig 测试 UDP 包转发是否成功，预期会返回 <code>www.google.com</code> 域名的解析结果：</p>
<p><code>dig @x.x.x.x -p 6000 www.google.com</code></p>
</li>
</ol>
<h3 id="转发-Unix域套接字"><a href="#转发-Unix域套接字" class="headerlink" title="转发 Unix域套接字"></a>转发 Unix域套接字</h3><p>通过 tcp 端口访问内网的 unix域套接字(例如和 docker daemon 通信)。</p>
<p>frps 的部署步骤同上。</p>
<ol>
<li><p>启动 frpc，启用 <code>unix_domain_socket</code> 插件，配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[unix_domain_socket]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = unix_domain_socket</span><br><span class="line"><span class="attr">plugin_unix_path</span> = /var/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 curl 命令查看 docker 版本信息</p>
<p><code>curl http://x.x.x.x:6000/version</code></p>
</li>
</ol>
<h3 id="对外提供简单的文件访问服务"><a href="#对外提供简单的文件访问服务" class="headerlink" title="对外提供简单的文件访问服务"></a>对外提供简单的文件访问服务</h3><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p>
<p>frps 的部署步骤同上。</p>
<ol>
<li><p>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test_static_file]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = static_file</span><br><span class="line"><span class="comment"># 要对外暴露的文件目录</span></span><br><span class="line"><span class="attr">plugin_local_path</span> = /tmp/file</span><br><span class="line"><span class="comment"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span></span><br><span class="line"><span class="attr">plugin_strip_prefix</span> = static</span><br><span class="line"><span class="attr">plugin_http_user</span> = abc</span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</p>
</li>
</ol>
<h3 id="安全地暴露内网服务"><a href="#安全地暴露内网服务" class="headerlink" title="安全地暴露内网服务"></a>安全地暴露内网服务</h3><p>对于某些服务来说如果直接暴露于公网上将会存在安全隐患。</p>
<p>使用 <strong>stcp(secret tcp)</strong> 类型的代理可以避免让任何人都能访问到要穿透的服务，但是访问者也需要运行另外一个 frpc。</p>
<p>以下示例将会创建一个只有自己能访问到的 ssh 服务代理。</p>
<p>frps 的部署步骤同上。</p>
<ol>
<li><p>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[secret_ssh]</span></span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要访问这个服务的机器上启动另外一个 frpc，配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[secret_ssh_visitor]</span></span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># stcp 的访问者</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="comment"># 要访问的 stcp 代理的名字</span></span><br><span class="line"><span class="attr">server_name</span> = secret_ssh</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="comment"># 绑定本地端口用于访问 ssh 服务</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 ssh 访问内网机器，假设用户名为 test：</p>
<p><code>ssh -oPort=6000 test@127.0.0.1</code></p>
</li>
</ol>
<h3 id="点对点内网穿透"><a href="#点对点内网穿透" class="headerlink" title="点对点内网穿透"></a>点对点内网穿透</h3><p>frp 提供了一种新的代理类型 <strong>xtcp</strong> 用于应对在希望传输大量数据且流量不经过服务器的场景。</p>
<p>使用方式同 <strong>stcp</strong> 类似，需要在两边都部署上 frpc 用于建立直接的连接。</p>
<p>目前处于开发的初级阶段，并不能穿透所有类型的 NAT 设备，所以穿透成功率较低。穿透失败时可以尝试 <strong>stcp</strong> 的方式。</p>
<ol>
<li><p>frps 除正常配置外需要额外配置一个 udp 端口用于支持该类型的客户端:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要访问这个服务的机器上启动另外一个 frpc，配置如下:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh_visitor]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># xtcp 的访问者</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="comment"># 要访问的 xtcp 代理的名字</span></span><br><span class="line"><span class="attr">server_name</span> = p2p_ssh</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="comment"># 绑定本地端口用于访问 ssh 服务</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 ssh 访问内网机器，假设用户名为 test:</p>
<p><code>ssh -oPort=6000 test@127.0.0.1</code></p>
</li>
</ol>
<h3 id="通过-frpc-所在机器访问外网"><a href="#通过-frpc-所在机器访问外网" class="headerlink" title="通过 frpc 所在机器访问外网"></a>通过 frpc 所在机器访问外网</h3><p>frpc 内置了 http proxy 和 socks5 插件，可以使其他机器通过 frpc 的网络访问互联网。</p>
<p>frps 的部署步骤同上。</p>
<ol>
<li><p>启动 frpc，启用 http_proxy 或 socks5 插件(plugin 换为 socks5 即可)， 配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器设置 http 或 socks5 代理地址为 <code>x.x.x.x:6000</code>，通过 frpc 机器的网络访问互联网。</p>
</li>
</ol>
<h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>由于 frp 目前支持的功能和配置项较多，未在文档中列出的功能可以从完整的示例配置文件中发现。</p>
<p><a href="./conf/frps_full.ini">frps 完整配置文件</a></p>
<p><a href="./conf/frpc_full.ini">frpc 完整配置文件</a></p>
<h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>通过浏览器查看 frp 的状态以及代理统计信息展示。</p>
<p>需要在 frps.ini 中指定 dashboard 服务使用的端口，即可开启此功能：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="comment"># dashboard 用户名密码，默认都为 admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br></pre></td></tr></table></figure>
<p>打开浏览器通过 <code>http://[server_addr]:7500</code> 访问 dashboard 界面，用户名密码默认为 <code>admin</code>。</p>
<p><img src="/doc/pic/dashboard.png" alt="dashboard"></p>
<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>从 v0.10.0 版本开始，所有 proxy 配置全部放在客户端(也就是之前版本的特权模式)，服务端和客户端的 common 配置中的 <code>privilege_token</code> 参数一致则身份验证通过。</p>
<p>需要注意的是 frpc 所在机器和 frps 所在机器的时间相差不能超过 15 分钟，因为时间戳会被用于加密验证中，防止报文被劫持后被其他人利用。</p>
<p>这个超时时间可以在配置文件中通过 <code>authentication_timeout</code> 这个参数来修改，单位为秒，默认值为 900，即 15 分钟。如果修改为 0，则 frps 将不对身份验证报文的时间戳进行超时校验。</p>
<h3 id="加密与压缩"><a href="#加密与压缩" class="headerlink" title="加密与压缩"></a>加密与压缩</h3><p>这两个功能默认是不开启的，需要在 frpc.ini 中通过配置来为指定的代理启用加密与压缩的功能，压缩算法使用 snappy：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 ssh 协议等，通过设置 <code>use_encryption = true</code>，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</p>
<p>如果传输的报文长度较长，通过设置 <code>use_compression = true</code> 对传输内容进行压缩，可以有效减小 frpc 与 frps 之间的网络流量，加快流量转发速度，但是会额外消耗一些 cpu 资源。</p>
<h3 id="客户端热加载配置文件"><a href="#客户端热加载配置文件" class="headerlink" title="客户端热加载配置文件"></a>客户端热加载配置文件</h3><p>当修改了 frpc 中的代理配置，可以通过 <code>frpc reload</code> 命令来动态加载配置文件，通常会在 10 秒内完成代理的更新。</p>
<p>启用此功能需要在 frpc 中启用 admin 端口，用于提供 API 服务。配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="number">7400</span></span><br></pre></td></tr></table></figure>
<p>之后执行重启命令：</p>
<p><code>frpc reload -c ./frpc.ini</code></p>
<p>等待一段时间后客户端会根据新的配置文件创建、更新、删除代理。</p>
<p><strong>需要注意的是，[common] 中的参数除了 start 外目前无法被修改。</strong></p>
<h3 id="客户端查看代理状态"><a href="#客户端查看代理状态" class="headerlink" title="客户端查看代理状态"></a>客户端查看代理状态</h3><p>frpc 支持通过 <code>frpc status -c ./frpc.ini</code> 命令查看代理的状态信息，此功能需要在 frpc 中配置 admin 端口。</p>
<h3 id="特权模式"><a href="#特权模式" class="headerlink" title="特权模式"></a>特权模式</h3><p>由于从 v0.10.0 版本开始，所有 proxy 都在客户端配置，原先的特权模式是目前唯一支持的模式。</p>
<h4 id="端口白名单"><a href="#端口白名单" class="headerlink" title="端口白名单"></a>端口白名单</h4><p>为了防止端口被滥用，可以手动指定允许哪些端口被使用，在 frps.ini 中通过 privilege_allow_ports 来指定：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">privilege_allow_ports</span> = <span class="number">2000</span>-<span class="number">3000</span>,<span class="number">3001</span>,<span class="number">3003</span>,<span class="number">4000</span>-<span class="number">50000</span></span><br></pre></td></tr></table></figure>
<p>privilege_allow_ports 可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 <code>,</code> 分隔，指定的范围以 <code>-</code> 分隔。</p>
<h3 id="TCP-多路复用"><a href="#TCP-多路复用" class="headerlink" title="TCP 多路复用"></a>TCP 多路复用</h3><p>从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 frp 可以承载更高的并发数。</p>
<p>该功能默认启用，如需关闭，可以在 frps.ini 和 frpc.ini 中配置，该配置项在服务端和客户端必须一致：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini 和 frpc.ini 中</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="底层通信可选-kcp-协议"><a href="#底层通信可选-kcp-协议" class="headerlink" title="底层通信可选 kcp 协议"></a>底层通信可选 kcp 协议</h3><p>从 v0.12.0 版本开始，底层通信协议支持选择 kcp 协议，在弱网环境下传输效率提升明显，但是会有一些额外的流量消耗。</p>
<p>开启 kcp 协议支持：</p>
<ol>
<li><p>在 frps.ini 中启用 kcp 协议支持，指定一个 udp 端口用于接收客户端请求：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># kcp 绑定的是 udp 端口，可以和 bind_port 一样</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 frpc.ini 指定需要使用的协议类型，目前只支持 tcp 和 kcp。其他代理配置不需要变更：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="comment"># server_port 指定为 frps 的 kcp_bind_port</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">protocol</span> = kcp</span><br></pre></td></tr></table></figure>
</li>
<li><p>像之前一样使用 frp，需要注意开放相关机器上的 udp 的端口的访问权限。</p>
</li>
</ol>
<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>默认情况下，当用户请求建立连接后，frps 才会请求 frpc 主动与后端服务建立一个连接。当为指定的代理启用连接池后，frp 会预先和后端服务建立起指定数量的连接，每次接收到用户请求后，会从连接池中取出一个连接和用户连接关联起来，避免了等待与后端服务建立连接以及 frpc 和 frps 之间传递控制信息的时间。</p>
<p>这一功能比较适合有大量短连接请求时开启。</p>
<ol>
<li><p>首先可以在 frps.ini 中设置每个代理可以创建的连接池上限，避免大量资源占用，客户端设置超过此配置后会被调整到当前值：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 frpc.ini 中为客户端启用连接池，指定预创建连接的数量：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="修改-Host-Header"><a href="#修改-Host-Header" class="headerlink" title="修改 Host Header"></a>修改 Host Header</h3><p>通常情况下 frp 不会修改转发的任何数据。但有一些后端服务会根据 http 请求 header 中的 host 字段来展现不同的网站，例如 nginx 的虚拟主机服务，启用 host-header 的修改功能可以动态修改 http 请求中的 host 字段。该功能仅限于 http 类型的代理。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = test.yourdomain.com</span><br><span class="line"><span class="attr">host_header_rewrite</span> = dev.yourdomain.com</span><br></pre></td></tr></table></figure>
<p>原来 http 请求中的 host 字段 <code>test.yourdomain.com</code> 转发到后端服务时会被替换为 <code>dev.yourdomain.com</code>。</p>
<h3 id="获取用户真实-IP"><a href="#获取用户真实-IP" class="headerlink" title="获取用户真实 IP"></a>获取用户真实 IP</h3><p>目前只有 <strong>http</strong> 类型的代理支持这一功能，可以通过用户请求的 header 中的 <code>X-Forwarded-For</code> 和 <code>X-Real-IP</code> 来获取用户真实 IP。</p>
<p><strong>需要注意的是，目前只在每一个用户连接的第一个 HTTP 请求中添加了这两个 header。</strong></p>
<h3 id="通过密码保护你的-web-服务"><a href="#通过密码保护你的-web-服务" class="headerlink" title="通过密码保护你的 web 服务"></a>通过密码保护你的 web 服务</h3><p>由于所有客户端共用一个 frps 的 http 服务端口，任何知道你的域名和 url 的人都能访问到你部署在内网的 web 服务，但是在某些场景下需要确保只有限定的用户才能访问。</p>
<p>frp 支持通过 HTTP Basic Auth 来保护你的 web 服务，使用户需要通过用户名和密码才能访问到你的服务。</p>
<p>该功能目前仅限于 http 类型的代理，需要在 frpc 的代理配置中添加用户名和密码的设置。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = test.yourdomain.com</span><br><span class="line"><span class="attr">http_user</span> = abc</span><br><span class="line"><span class="attr">http_pwd</span> = abc</span><br></pre></td></tr></table></figure>
<p>通过浏览器访问 <code>http://test.yourdomain.com</code>，需要输入配置的用户名和密码才能访问。</p>
<h3 id="自定义二级域名"><a href="#自定义二级域名" class="headerlink" title="自定义二级域名"></a>自定义二级域名</h3><p>在多人同时使用一个 frps 时，通过自定义二级域名的方式来使用会更加方便。</p>
<p>通过在 frps 的配置文件中配置 <code>subdomain_host</code>，就可以启用该特性。之后在 frpc 的 http、https 类型的代理中可以不配置 <code>custom_domains</code>，而是配置一个 <code>subdomain</code> 参数。</p>
<p>只需要将 <code>*.{subdomain_host}</code> 解析到 frps 所在服务器。之后用户可以通过 <code>subdomain</code> 自行指定自己的 web 服务所需要使用的二级域名，通过 <code>{subdomain}.{subdomain_host}</code> 来访问自己的 web 服务。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">subdomain_host</span> = frps.com</span><br></pre></td></tr></table></figure>
<p>将泛域名 <code>*.frps.com</code> 解析到 frps 所在服务器的 IP 地址。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">subdomain</span> = test</span><br></pre></td></tr></table></figure>
<p>frps 和 fprc 都启动成功后，通过 <code>test.frps.com</code> 就可以访问到内网的 web 服务。</p>
<p>需要注意的是如果 frps 配置了 <code>subdomain_host</code>，则 <code>custom_domains</code> 中不能是属于 <code>subdomain_host</code> 的子域名或者泛域名。</p>
<p>同一个 http 或 https 类型的代理中 <code>custom_domains</code>  和 <code>subdomain</code> 可以同时配置。</p>
<h3 id="URL-路由"><a href="#URL-路由" class="headerlink" title="URL 路由"></a>URL 路由</h3><p>frp 支持根据请求的 URL 路径路由转发到不同的后端服务。</p>
<p>通过配置文件中的 <code>locations</code> 字段指定一个或多个 proxy 能够匹配的 URL 前缀(目前仅支持最大前缀匹配，之后会考虑正则匹配)。例如指定 <code>locations = /news</code>，则所有 URL 以 <code>/news</code> 开头的请求都会被转发到这个服务。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[web01]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = web.yourdomain.com</span><br><span class="line"><span class="attr">locations</span> = /</span><br><span class="line"></span><br><span class="line"><span class="section">[web02]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">81</span></span><br><span class="line"><span class="attr">custom_domains</span> = web.yourdomain.com</span><br><span class="line"><span class="attr">locations</span> = /news,/about</span><br></pre></td></tr></table></figure>
<p>按照上述的示例配置后，<code>web.yourdomain.com</code> 这个域名下所有以 <code>/news</code> 以及 <code>/about</code> 作为前缀的 URL 请求都会被转发到 web02，其余的请求会被转发到 web01。</p>
<h3 id="通过代理连接-frps"><a href="#通过代理连接-frps" class="headerlink" title="通过代理连接 frps"></a>通过代理连接 frps</h3><p>在只能通过代理访问外网的环境内，frpc 支持通过 HTTP PROXY 和 frps 进行通信。</p>
<p>可以通过设置 <code>HTTP_PROXY</code> 系统环境变量或者通过在 frpc 的配置文件中设置 <code>http_proxy</code> 参数来使用此功能。</p>
<p>仅在 <code>protocol = tcp</code> 时生效。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">http_proxy</span> = http://user:pwd@<span class="number">192.168</span>.<span class="number">1.128</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure>
<h3 id="范围端口映射"><a href="#范围端口映射" class="headerlink" title="范围端口映射"></a>范围端口映射</h3><p>在 frpc 的配置文件中可以指定映射多个端口，目前只支持 tcp 和 udp 的类型。</p>
<p>这一功能通过 <code>range:</code> 段落标记来实现，客户端会解析这个标记中的配置，将其拆分成多个 proxy，每一个 proxy 以数字为后缀命名。</p>
<p>例如要映射本地 6000-6005, 6007 这6个端口，主要配置如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[range:test_tcp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6000</span>-<span class="number">6006</span>,<span class="number">6007</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span>-<span class="number">6006</span>,<span class="number">6007</span></span><br></pre></td></tr></table></figure>
<p>实际连接成功后会创建 6 个 proxy，命名为 <code>test_tcp_0, test_tcp_1 ... test_tcp_5</code>。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>默认情况下，frpc 只会转发请求到本地 tcp 或 udp 端口。</p>
<p>插件模式是为了在客户端提供更加丰富的功能，目前内置的插件有 <code>unix_domain_socket</code>、<code>http_proxy</code>、<code>socks5</code>、<code>static_file</code>。具体使用方式请查看<a href="#使用示例">使用示例</a>。</p>
<p>通过 <code>plugin</code> 指定需要使用的插件，插件的配置参数都以 <code>plugin_</code> 开头。使用插件后 <code>local_ip</code> 和 <code>local_port</code> 不再需要配置。</p>
<p>使用 <strong>http_proxy</strong> 插件的示例:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy</span><br><span class="line"><span class="attr">plugin_http_user</span> = abc</span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc</span><br></pre></td></tr></table></figure>
<p><code>plugin_http_user</code> 和 <code>plugin_http_passwd</code> 即为 <code>http_proxy</code> 插件可选的配置参数。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> frp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[消息队列 RabbitMQ -- 介绍]]></title>
      <url>/2018/01/03/mq-rabbitmq-introduce/</url>
      <content type="html"><![CDATA[<p><a href="https://www.rabbitmq.org" target="_blank" rel="noopener">RabbitMQ</a> 是除了 Qpid 之外， 唯一实现了AMQP（高级消息协议：Advanced Message Queue Protocol）标准的代理服务器。<br>虽然AMQP像邮箱那样为离线消费者存储消息，但是这些根据标签路由的消息更为灵活。同时和邮件不同的是，这些消息没有固定的结构，甚至于可以直接存储二进制数据。不同于IM协议，AMQP隐去了消息的发送方和接受方。AMQP也没有“存在”这个概念。<br><b>对负载均衡来说，队列是绝佳方案.</b><br><br></p>
<h6 id="生产者-Producer-和-消费者-Consumer"><a href="#生产者-Producer-和-消费者-Consumer" class="headerlink" title="生产者(Producer) 和 消费者(Consumer)"></a>生产者(Producer) 和 消费者(Consumer)</h6><p>生产者创建消息(消息包含两部分: 有效载荷[payload] 和 标签[label])，然后发布(Publish) 到代理服务器(RabbitMQ)</p>
<p>消费者连接到代理服务器，并订阅到队列上。当消费者接受到消息时，它只得到了消息的一部分：有效载荷。在消息路由过程中，消息的标签并没有随有效载荷一同传递。<br><b>如果需要明确知道谁生产的AMQP消息的话，就要看生产者是否把消息方信息放入有效载荷中。</b></p>
<h6 id="AMQP栈"><a href="#AMQP栈" class="headerlink" title="AMQP栈"></a>AMQP栈</h6><p><img src="https://www.rabbitmq.com/img/tutorials/intro/hello-world-example-routing.png"><br>AMQP消息路由必须有三个部分： 交换器、队列、绑定。<br><b>生产者把消息发布到交换器上；消息最终到达队列，并被消费者解释；绑定决定了消息如何从路由器 路由到特定队列。</b></p>
<h6 id="消费者和生产者到底谁去创建队列？"><a href="#消费者和生产者到底谁去创建队列？" class="headerlink" title="消费者和生产者到底谁去创建队列？"></a>消费者和生产者到底谁去创建队列？</h6><p><b>如果你不能承担得起消息进入“黑洞”而丢失的话，你的生产者和消费者就都应该尝试去创建队列。</b></p>
<h6 id="生产者创建消息"><a href="#生产者创建消息" class="headerlink" title="生产者创建消息"></a>生产者创建消息</h6><pre><code><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/streadway/amqp"</span></span><br><span class="line"><span class="comment">// step 1. 创建 connection</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@127.0.0.1:5672/"</span>)</span><br><span class="line"><span class="comment">// step 2. 获取 (信道)channel</span></span><br><span class="line">channel, err := conn.Channel()</span><br><span class="line"><span class="comment">// step 3. 在信道上声明交换器 exchange</span></span><br><span class="line">channel.ExchangeDeclare(</span><br><span class="line">    <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">    amqp.ExchangeDirect, <span class="comment">// exchange type</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// durable</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// autoDelete</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// internal</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// noWait</span></span><br><span class="line">    <span class="literal">nil</span>,                 <span class="comment">// args amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 4. 声明队列</span></span><br><span class="line">queue, err := ch.QueueDeclare(</span><br><span class="line">        <span class="string">"queue_name"</span>,    <span class="comment">// queue name</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// durable</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// delete when unused</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// exclusive</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// no-wait</span></span><br><span class="line">        <span class="literal">nil</span>,             <span class="comment">// arguments amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 5. 将队列绑定根据路由键绑定到交换器上</span></span><br><span class="line">channel.QueueBind(</span><br><span class="line">    queue.Name,          <span class="comment">// queue name</span></span><br><span class="line">    <span class="string">"route_key"</span>,         <span class="comment">// route key</span></span><br><span class="line">    <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">    <span class="literal">false</span>,               <span class="comment">// no-wait</span></span><br><span class="line">    <span class="literal">nil</span>,                 <span class="comment">// arguments amqp.Table</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// step 6. 将消息发送到交换器上，交换器会根据路由键将消息发送到对应的队列queue</span></span><br><span class="line">channel.Publish(</span><br><span class="line">        <span class="string">"exchange_name"</span>, <span class="comment">// exchange</span></span><br><span class="line">        <span class="string">"route_key"</span>,     <span class="comment">// routing key</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// mandatory</span></span><br><span class="line">        <span class="literal">false</span>,           <span class="comment">// immediate</span></span><br><span class="line">        amqp.Publishing&#123; <span class="comment">// message</span></span><br><span class="line">            ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">            Body:        []<span class="keyword">byte</span>(<span class="string">"hello world"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</code></pre><h6 id="消费者订阅消息"><a href="#消费者订阅消息" class="headerlink" title="消费者订阅消息"></a>消费者订阅消息</h6><pre><code><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> <span class="string">"github.com/streadway/amqp"</span></span><br><span class="line">   <span class="comment">// step 1. 创建 connection</span></span><br><span class="line">   conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@127.0.0.1:5672/"</span>)</span><br><span class="line">   <span class="comment">// step 2. 获取 (信道)channel</span></span><br><span class="line">   channel, err := conn.Channel()</span><br><span class="line">   <span class="comment">// step 3. 在信道上声明交换器 exchange</span></span><br><span class="line">   channel.ExchangeDeclare(</span><br><span class="line">       <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">       amqp.ExchangeDirect, <span class="comment">// exchange type</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// durable</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// autoDelete</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// internal</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// noWait</span></span><br><span class="line">       <span class="literal">nil</span>,                 <span class="comment">// args amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   <span class="comment">// step 4. 声明队列</span></span><br><span class="line">   queue, err := ch.QueueDeclare(</span><br><span class="line">           <span class="string">"queue_name"</span>,    <span class="comment">// queue name</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// durable</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// delete when unused</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// exclusive</span></span><br><span class="line">           <span class="literal">false</span>,           <span class="comment">// no-wait</span></span><br><span class="line">           <span class="literal">nil</span>,             <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   <span class="comment">// step 5. 将队列绑定根据路由键绑定到交换器上</span></span><br><span class="line">   channel.QueueBind(</span><br><span class="line">       queue.Name,          <span class="comment">// queue name</span></span><br><span class="line">       <span class="string">"route_key"</span>,         <span class="comment">// route key</span></span><br><span class="line">       <span class="string">"exchange_name"</span>,     <span class="comment">// exchange name</span></span><br><span class="line">       <span class="literal">false</span>,               <span class="comment">// no-wait</span></span><br><span class="line">       <span class="literal">nil</span>,                 <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">   forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="comment">// step 6. 在信道上订阅队列</span></span><br><span class="line">   messages, err := channel.Consume(</span><br><span class="line">       queue.Name,           <span class="comment">// queue</span></span><br><span class="line">       <span class="string">""</span>,                   <span class="comment">// consumer</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// autoAck</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// exclusive</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// noLocal ：The noLocal flag is not supported by RabbitMQ.</span></span><br><span class="line">       <span class="literal">false</span>,                <span class="comment">// no-wait</span></span><br><span class="line">       <span class="literal">nil</span>,                  <span class="comment">// arguments amqp.Table</span></span><br><span class="line">   )</span><br><span class="line">  <span class="comment">// 开启一个 goruntine 获取消息内容 </span></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> message := <span class="keyword">range</span> messages &#123;</span><br><span class="line">               log.Printf(<span class="string">"Received a message: %s"</span>, message.Body)</span><br><span class="line">               message.Ack(<span class="literal">true</span>)</span><br><span class="line">       &#125;</span><br><span class="line">&#125;()</span><br><span class="line">   fmt.Println(<span class="string">"Please ctrl+c to stop"</span>)</span><br><span class="line">   &lt;-forever</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> mq </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitmq queue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[启动mysql - ERROR! without updating PID file]]></title>
      <url>/2018/01/03/mysql-start-error/</url>
      <content type="html"><![CDATA[<h5 id="mysql-开启出现这错误"><a href="#mysql-开启出现这错误" class="headerlink" title="mysql 开启出现这错误"></a>mysql 开启出现这错误</h5><p>Starting MySQL.. ERROR! The server quit without updating PID file (/www/server/data/localhost.localdomain.pid)</p>
<pre><code>进入 /www/server/data/
rm -rf ib_logfile* 
rm -rf localhost.localdomain.err
</code></pre>]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> error </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开启https小绿锁 let's encrypt]]></title>
      <url>/2018/01/02/let-s-encrypt/</url>
      <content type="html"><![CDATA[<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<h6 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h6><p>Let’s Encrypt是2016年4月12日成立的一家证书授权中心，提供免费的传输层安全（TLS）X.509证书，通过自动化的过程消除目前安全网站证书需要手工创建，加密，签名，安装以及更新的复杂性。</p>
<h6 id="获取-let’s-encrypt"><a href="#获取-let’s-encrypt" class="headerlink" title="获取 let’s encrypt"></a>获取 let’s encrypt</h6><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/certbot/certbot.git</span><br></pre></td></tr></table></figure>
</code></pre><h6 id="安装ssl证书"><a href="#安装ssl证书" class="headerlink" title="安装ssl证书"></a>安装ssl证书</h6><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./certbot-auto certonly --standalone -d example.com --email example@email.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># certbot-auto renew  重新安装之前存在的ssl证书</span></span><br></pre></td></tr></table></figure>
</code></pre><h6 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h6><pre><code><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/example.com/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#双向 ssl 认证</span></span><br><span class="line">    <span class="comment"># ssl_verify_client on;</span></span><br><span class="line">    <span class="comment"># ssl_client_certificate /etc/letsencrypt/live/example.com/cert.pem;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你好，世界]]></title>
      <url>/2018/01/01/hello-world/</url>
      <content type="html"><![CDATA[<pre><code><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。</span><br><span class="line"></span><br><span class="line">料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        
    </entry>
    
  
  
</search>
